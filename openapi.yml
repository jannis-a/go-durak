openapi: 3.0.1

info:
  title: Durak API
  version: 0.1.0

externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io

servers:
  - url: http://api.durak.tld/v1

paths:
  /auth/login:
    post:
      summary: Logs user into the system
      operationId: loginUser
      tags:
        - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Credentials'
        required: true
      responses:
        200:
          description: Login successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessToken'
        401:
          description: Invalid credentials.

  /auth/refresh:
    post:
      summary: Get a new access token
      operationId: tokenRefresh
      tags:
        - auth
      security:
        - ApiKeyAuth: []
      parameters:
        - $ref: '#/components/parameters/CookieRefreshToken'
      responses:
        200:
          description: Refresh successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessToken'
        401:
          description: Invalid token.

  /auth/logout:
    post:
      summary: Logs user out the system
      operationId: logoutUser
      tags:
        - auth
      security:
        - ApiKeyAuth: []
      parameters:
        - $ref: '#/components/parameters/CookieRefreshToken'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccessToken'
      responses:
        200:
          description: Logout successful.
        401:
          description: Invalid token.

  /users:
    post:
      summary: Create user
      description: This can only be done by a logged out user.
      operationId: createUser
      tags:
        - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreate'
        required: false
      responses:
        201:
          description: Own user created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSelf'

  /users/me:
    get:
      summary: Retrieve own user
      description: This can only be done by a logged in user.
      operationId: getUser
      tags:
        - users
      security:
        - ApiKeyAuth: []
      responses:
        200:
          description: Own user retrieved.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSelf'

    patch:
      summary: Update own user
      description: This can only be done by a logged in user.
      operationId: updateUser
      tags:
        - users
      security:
        - ApiKeyAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdate'
        required: true
      responses:
        200:
          description: Own user updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSelf'
    delete:
      summary: Delete own user
      description: This can only be done by a logged in user.
      operationId: deleteUser
      tags:
        - users
      security:
        - ApiKeyAuth: []
      responses:
        202:
          description: User deleted

  /users/{username}:
    parameters:
      - $ref: '#/components/parameters/usernameParam'

    get:
      summary: Get user by user name
      operationId: getUserByName
      tags:
        - users
      security:
        - ApiKeyAuth: []
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Invalid username supplied
          content: {}
        404:
          description: User not found
          content: {}

components:
  schemas:
    Credentials:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
          minLength: 3
          maxLength: 50
        password:
          type: string
          format: password

    AccessToken:
      type: object
      properties:
        token:
          type: string

    User:
      type: object
      properties:
        id:
          type: integer
          minimum: 1
        username:
          type: string
          minLength: 3
          maxLength: 50
        joined_at:
          type: string
          format: date-time

    UserSelf:
      allOf:
        - $ref: '#/components/schemas/User'
        - type: object
          properties:
            email:
              type: string
              format: email
            updated_at:
              type: string
              format: date-time
              nullable: true

    UserUpdate:
      type: object
      properties:
        username:
          type: string
          minLength: 3
          maxLength: 50
        email:
          type: string
          format: email

    UserPassword:
      type: object
      required:
        - password
        - password_confirm
      properties:
        password:
          type: string
          format: password
        password_confirm:
          type: string
          format: password

    UserCreate:
      allOf:
        - $ref: '#/components/schemas/UserUpdate'
        - $ref: '#/components/schemas/UserPassword'
        - type: object
          required:
            - username
            - email

  parameters:
    CookieRefreshToken:
      description: The refresh token.
      name: refresh_token
      in: cookie
      required: true
      schema:
        type: string

    usernameParam:
      description: The name that needs to be fetched.
      in: path
      name: username
      required: true
      schema:
        type: string

  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      name: Authorization
      in: header
